name: CI/CD Pipeline Example with Pytest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run all tests (Frontend and Backend)
        run: |
          echo "Running all tests..."
          pytest tests/frontend/test_login.py tests/backend/test_checkout.py --junitxml=report.xml --maxfail=1 --disable-warnings --capture=no || true

      - name: Upload test report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-report
          path: report.xml

      - name: Generate test summary
        run: |
          # Count total tests and failed tests from the XML
          TOTAL_TESTS=$(grep -c '<testcase' report.xml || echo 0)
          FAIL_COUNT=$(grep -c '<failure>' report.xml || echo 0)

          # Calculate passed tests
          PASS_COUNT=$((TOTAL_TESTS - FAIL_COUNT))

          # Output the test results
          echo "Test Result: Passed $PASS_COUNT, Failed $FAIL_COUNT"

          # Generate a simple JSON file
          echo "{\"passed\": $PASS_COUNT, \"failed\": $FAIL_COUNT}" > test_summary.json

      - name: Upload test summary
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-summary
          path: test_summary.json
