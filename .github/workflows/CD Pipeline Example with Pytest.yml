name: CI/CD Pipeline Example with Pytest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend_commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get Git commit ID
        id: get_commit_id
        run: |
          echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "::set-output name=commit_id::$(git rev-parse HEAD)"

      - name: Build frontend
        run: |
          echo "Building frontend..."
          # Simulate a build command
          sleep 2

      - name: Display commit information
        run: |
          echo "Git Commit ID: ${{ steps.get_commit_id.outputs.commit_id }}"
          echo "Commit Message: $(git log -1 --pretty=%B)"
          echo "Time of Commit: $(git log -1 --pretty=%cd)"

  frontend-test-suite:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run frontend tests (Pytest)
        run: |
          echo "Running frontend tests..."
          pytest tests/frontend/test_login.py --junitxml=report.xml --maxfail=1 --disable-warnings --capture=no || true

      - name: Upload frontend test report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-report
          path: report.xml

      - name: Generate frontend test summary
        run: |
          PASS_COUNT=$(grep -c 'PASSED' report.xml || echo 0)
          FAIL_COUNT=$(grep -c 'FAILED' report.xml || echo 0)
          echo "Frontend Test Result: Passed $PASS_COUNT, Failed $FAIL_COUNT"
          echo "Frontend Test Result: {\"passed\": $PASS_COUNT, \"failed\": $FAIL_COUNT}" > test_summary.json

      - name: Upload frontend test summary
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-summary
          path: test_summary.json

  build-backend:
    runs-on: ubuntu-latest
    outputs:
      backend_commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get Git commit ID
        id: get_commit_id
        run: |
          echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "::set-output name=commit_id::$(git rev-parse HEAD)"

      - name: Build backend
        run: |
          echo "Building backend..."
          # Simulate a build command
          sleep 2

      - name: Display commit information
        run: |
          echo "Git Commit ID: ${{ steps.get_commit_id.outputs.commit_id }}"
          echo "Commit Message: $(git log -1 --pretty=%B)"
          echo "Time of Commit: $(git log -1 --pretty=%cd)"

  backend-test-suite:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run backend tests (Pytest)
        run: |
          echo "Running backend tests..."
          pytest tests/backend/test_checkout.py --junitxml=report.xml --maxfail=1 --disable-warnings --capture=no || true

      - name: Upload backend test report
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-report
          path: report.xml

      - name: Generate backend test summary
        run: |
          PASS_COUNT=$(grep -c 'PASSED' report.xml || echo 0)
          FAIL_COUNT=$(grep -c 'FAILED' report.xml || echo 0)
          echo "Backend Test Result: Passed $PASS_COUNT, Failed $FAIL_COUNT"
          echo "Backend Test Result: {\"passed\": $PASS_COUNT, \"failed\": $FAIL_COUNT}" > test_summary.json

      - name: Upload backend test summary
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-summary
          path: test_summary.json
